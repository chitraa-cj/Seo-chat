"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMutationFieldStatements = void 0;
const constants_1 = require("../../constants");
const map_to_db_property_1 = __importDefault(require("../../utils/map-to-db-property"));
const math_1 = require("./math");
const parse_mutable_field_1 = require("./parse-mutable-field");
/**
 * Transforms a key-value pair such as:
 * { name_SET: "John" }
 * Into statements such as:
 * SET node.name = $param
 **/
function getMutationFieldStatements({ nodeOrRel, param, key, varName, value, withVars, }) {
    const strs = [];
    const { settableField, operator } = (0, parse_mutable_field_1.parseMutableField)(nodeOrRel, key);
    if (settableField) {
        const dbFieldName = (0, map_to_db_property_1.default)(nodeOrRel, settableField.fieldName);
        if (settableField.typeMeta.required && value === null) {
            throw new Error(`Cannot set non-nullable field ${nodeOrRel.name}.${settableField.fieldName} to null`);
        }
        switch (operator) {
            case "SET": {
                const isSpatial = constants_1.SPATIAL_TYPES.includes(settableField.typeMeta.name);
                if (isSpatial) {
                    if (settableField.typeMeta.array) {
                        strs.push(`SET ${varName}.${dbFieldName} = [p in $${param} | point(p)]`);
                    }
                    else {
                        strs.push(`SET ${varName}.${dbFieldName} = point($${param})`);
                    }
                }
                else {
                    strs.push(`SET ${varName}.${dbFieldName} = $${param}`);
                }
                break;
            }
            case "INCREMENT":
            case "DECREMENT":
            case "ADD":
            case "SUBTRACT":
            case "DIVIDE":
            case "MULTIPLY": {
                const mathMatch = (0, math_1.matchMathField)(key);
                const mathDescriptor = (0, math_1.mathDescriptorBuilder)(value, nodeOrRel, mathMatch);
                const mathStatements = (0, math_1.buildMathStatements)(mathDescriptor, varName, withVars, param);
                strs.push(...mathStatements);
                break;
            }
            case "PUSH": {
                const pointArrayField = nodeOrRel.pointFields.find((x) => x.fieldName === settableField.fieldName);
                if (pointArrayField) {
                    strs.push(`SET ${varName}.${dbFieldName} = ${varName}.${dbFieldName} + [p in $${param} | point(p)]`);
                }
                else {
                    strs.push(`SET ${varName}.${dbFieldName} = ${varName}.${dbFieldName} + $${param}`);
                }
                break;
            }
            case "POP": {
                strs.push(`SET ${varName}.${dbFieldName} = ${varName}.${dbFieldName}[0..-$${param}]`);
                break;
            }
        }
    }
    return strs.join("\n");
}
exports.getMutationFieldStatements = getMutationFieldStatements;
//# sourceMappingURL=get-mutation-field-statements.js.map