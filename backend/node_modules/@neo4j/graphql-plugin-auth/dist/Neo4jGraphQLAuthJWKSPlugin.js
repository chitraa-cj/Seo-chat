"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const jwks_rsa_1 = require("jwks-rsa");
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("./constants");
const debug = (0, debug_1.default)(constants_1.DEBUG_PREFIX);
class Neo4jGraphQLAuthJWKSPlugin {
    constructor(input) {
        this.client = null;
        //We are going to use this input later, so we need to save it here.
        this.input = input;
        this.rolesPath = input.rolesPath;
        this.isGlobalAuthenticationEnabled = input.globalAuthentication || false;
        this.bindPredicate = input.bindPredicate || "all";
        //It will be empty string if the endpoint is a function
        //This means the value will be calculated later
        const jwksEndpoint = typeof input.jwksEndpoint === "string" ? input.jwksEndpoint : "";
        this.options = {
            jwksUri: jwksEndpoint,
            rateLimit: true,
            jwksRequestsPerMinute: 10,
            cache: true,
            cacheMaxEntries: 5,
            cacheMaxAge: 600000,
        };
        //If the endpoint is set in the constructor directly we can create th client immediately here
        if (jwksEndpoint !== "")
            this.client = new jwks_rsa_1.JwksClient(this.options);
    }
    tryToResolveKeys(req) {
        if (typeof this.input.jwksEndpoint === "string")
            return;
        //The url will be computed based on the jwksEndpoint implementation
        this.options.jwksUri = this.input.jwksEndpoint(req);
        this.client = new jwks_rsa_1.JwksClient(this.options);
        return;
    }
    async decode(token) {
        let result;
        try {
            debug("Verifying JWT using OpenID Public Key Set Endpoint");
            result = await this.verifyJWKS({
                token,
            });
        }
        catch (error) {
            debug("%s", error);
        }
        return result;
    }
    async verifyJWKS({ token }) {
        const getKey = (header, callback) => {
            if (!this.client) {
                debug("JwksClient should NOT be empty! Make sure the 'tryToResolveKeys' method is called before decoding");
                return;
            }
            const kid = header.kid || "";
            this.client.getSigningKey(kid, (err, key) => {
                const signingKey = key?.getPublicKey();
                callback(err, signingKey);
            });
        };
        return new Promise((resolve, reject) => {
            if (!this.client)
                reject("JwksClient should not be empty! Make sure the 'tryToResolveKeys' method is called before decoding");
            jsonwebtoken_1.default.verify(token, getKey, {
                algorithms: ["HS256", "RS256"],
                issuer: this.input.issuer,
                audience: this.input.audience,
            }, (err, decoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(decoded);
                }
            });
        });
    }
}
exports.default = Neo4jGraphQLAuthJWKSPlugin;
//# sourceMappingURL=Neo4jGraphQLAuthJWKSPlugin.js.map