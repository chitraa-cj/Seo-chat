"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("./constants");
const exceptions_1 = require("./exceptions");
const debug = (0, debug_1.default)(constants_1.DEBUG_PREFIX);
class Neo4jGraphQLAuthJWTPlugin {
    constructor(input) {
        this.secret = null;
        this.input = input;
        this.secret = typeof input.secret === "function" ? null : input.secret;
        this.noVerify = input.noVerify;
        this.rolesPath = input.rolesPath;
        this.isGlobalAuthenticationEnabled = input.globalAuthentication || false;
        this.bindPredicate = input.bindPredicate || "all";
        if (this.noVerify && this.isGlobalAuthenticationEnabled) {
            throw new Error("Neo4jGraphQLAuthJWTPlugin, noVerify and globalAuthentication can not both be enabled simultaneously.");
        }
    }
    tryToResolveKeys(req) {
        if (typeof this.input.secret !== "function")
            return;
        this.secret = this.input.secret(req);
        return;
    }
    /* eslint-disable @typescript-eslint/require-await */
    async decode(token) {
        let result;
        try {
            if (this.noVerify) {
                debug("Skipping verifying JWT as noVerify is not set");
                result = jsonwebtoken_1.default.decode(token, { json: true });
            }
            if (this.secret) {
                debug("Verifying JWT using secret");
                result = jsonwebtoken_1.default.verify(token, this.secret, {
                    algorithms: ["HS256", "RS256"],
                    issuer: this.input.issuer,
                    audience: this.input.audience,
                });
            }
            else if (typeof this.input.secret === "function" && !this.secret) {
                debug("'secret' should not be null, make sure the 'tryToResolveKeys' is ran before the decode method.");
                throw exceptions_1.AUTH_JWT_PLUGIN_NULL_SECRET_EXCEPTION;
            }
        }
        catch (error) {
            debug("%s", error);
            if (error === exceptions_1.AUTH_JWT_PLUGIN_NULL_SECRET_EXCEPTION) {
                throw error;
            }
        }
        return result;
    }
}
exports.default = Neo4jGraphQLAuthJWTPlugin;
//# sourceMappingURL=Neo4jGraphQLAuthJWTPlugin.js.map